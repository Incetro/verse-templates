{% include 'header' %}

import VERSE
import Swinject
import Foundation

// MARK: - {{ module_info.name }}Composer

/// `{{ module_info.name }}` module composer
///
/// `{{ module_info.name }}Composer` is responsible for making `{{ module_info.name }}` module instances.
/// You can choose a specification from `Specification` which defines your module type.
{{ privacy }}final class {{ module_info.name }}Composer {

    // MARK: - Properties

    /// Dependency injection container
    private let container: Container

    // MARK: - Initializers

    /// Default initializer
    /// - Parameter container: Dependency injection container
    {{ privacy }}init(container: Container = AssembliesHolder.container) {
        self.container = container
    }

    // MARK: - Composition

    /// Create a new `{{ module_info.name }}View` instance for the given specification
    /// - Parameter specification: target specification value
    /// - Returns: a new `{{ module_info.name }}View` instance for the given specification
    {{ privacy }}func view() -> {{ module_info.name }}View {
        {{ module_info.name }}View(store: store())
    }

    /// Create a new `{{ module_info.name }}Store` instance for the given specification
    /// - Parameter specification: target specification value
    /// - Returns: a new `{{ module_info.name }}Store` instance for the given specification
    {{ privacy }}func store() -> {{ module_info.name }}Store {
        {{ module_info.name }}Store(
            initialState: {{ module_info.name }}State(),
            reducer: {{ module_name_uncap }}Reducer,
            environment: environment()
        )
    }

    /// Create a new `{{ module_info.name }}Environment` instance for the given specification
    /// - Parameter specification: target specification value
    /// - Returns: a new `{{ module_info.name }}Environment` instance for the given specification
    {{ privacy }}func environment() -> {{ module_info.name }}Environment {
        container.resolve({{ module_info.name }}Environment.self).unwrap()
    }
}

// MARK: - Aliases

/// `Reducer` alias
{{ privacy }}typealias {{ module_info.name }}Reducer = Reducer<{{ module_info.name }}State, {{ module_info.name }}Action, {{ module_info.name }}Environment>

/// `Store` alias
{{ privacy }}typealias {{ module_info.name }}Store = Store<{{ module_info.name }}State, {{ module_info.name }}Action>
